# Makefile para Parser LL(1) con Lex/Yacc
# Gram√°tica: E -> T E' | E' -> + T E' | Œµ | T -> F T' | T' -> * F T' | Œµ | F -> ( E ) | ident

CC = gcc
CFLAGS = -Wall -Wextra -std=c99 -g
FLEX = flex
BISON = bison
TARGET = parser
SOURCES = lex.yy.c parser.tab.c
OBJECTS = $(SOURCES:.c=.o)

# Archivos de prueba
TEST_INPUT = test_input.txt
TEST_ERRORS = test_errores.txt
EXAMPLES = ejemplos.txt

.PHONY: all run test clean test-errors test-all info check-tools help

# Regla principal
all: check-tools $(TARGET)
	@echo "‚úÖ Compilaci√≥n completada exitosamente"
	@echo "üìã Ejecuta 'make run' para probar el parser"
	@echo "üìã Ejecuta 'make test' para ejecutar las pruebas"

# Compilar el parser
$(TARGET): parser.tab.c lex.yy.c
	@echo "üî® Compilando parser LL(1)..."
	$(CC) $(CFLAGS) -o $(TARGET) parser.tab.c lex.yy.c
	@echo "‚úÖ Parser compilado: $(TARGET)"

# Generar parser con Bison
parser.tab.c parser.tab.h: parser.y
	@echo "üîß Generando parser con Bison..."
	$(BISON) -d parser.y

# Generar lexer con Flex
lex.yy.c: lexer.l parser.tab.h
	@echo "üîß Generando lexer con Flex..."
	$(FLEX) lexer.l

# Ejecutar el parser interactivamente
run: $(TARGET)
	@echo "üöÄ Ejecutando parser LL(1) (Ctrl+D para terminar):"
	@echo "üìù Ejemplos v√°lidos: a, a+b, a*b, (a+b)*c, a+b*c"
	./$(TARGET)

# Ejecutar pruebas con casos v√°lidos
test: $(TARGET) $(TEST_INPUT)
	@echo "üß™ Ejecutando pruebas con casos v√°lidos..."
	@echo "üìÅ Archivo de prueba: $(TEST_INPUT)"
	@echo "----------------------------------------"
	@if [ -f $(TEST_INPUT) ]; then \
		while IFS= read -r line; do \
			if [ -n "$$line" ] && [ "$${line#\#}" = "$$line" ]; then \
				echo "üîç Probando: $$line"; \
				echo "$$line" | ./$(TARGET); \
				echo "----------------------------------------"; \
			fi; \
		done < $(TEST_INPUT); \
	else \
		echo "‚ùå Archivo $(TEST_INPUT) no encontrado"; \
	fi

# Ejecutar pruebas con casos de error
test-errors: $(TARGET) $(TEST_ERRORS)
	@echo "üß™ Ejecutando pruebas con casos de error..."
	@echo "üìÅ Archivo de prueba: $(TEST_ERRORS)"
	@echo "----------------------------------------"
	@if [ -f $(TEST_ERRORS) ]; then \
		while IFS= read -r line; do \
			if [ -n "$$line" ] && [ "$${line#\#}" = "$$line" ]; then \
				echo "üîç Probando (error esperado): $$line"; \
				echo "$$line" | ./$(TARGET); \
				echo "----------------------------------------"; \
			fi; \
		done < $(TEST_ERRORS); \
	else \
		echo "‚ùå Archivo $(TEST_ERRORS) no encontrado"; \
	fi

# Ejecutar todas las pruebas
test-all: test test-errors
	@echo "‚úÖ Todas las pruebas completadas"

# Mostrar ejemplos
ejemplos: $(EXAMPLES)
	@echo "üìö Ejemplos de uso del parser LL(1):"
	@echo "======================================"
	@if [ -f $(EXAMPLES) ]; then \
		cat $(EXAMPLES); \
	else \
		echo "‚ùå Archivo $(EXAMPLES) no encontrado"; \
	fi

# Limpiar archivos generados
clean:
	@echo "üßπ Limpiando archivos generados..."
	rm -f $(TARGET) $(OBJECTS) lex.yy.c parser.tab.c parser.tab.h
	rm -rf $(TARGET).dSYM
	@echo "‚úÖ Limpieza completada"

# Verificar herramientas necesarias
check-tools:
	@echo "üîç Verificando herramientas necesarias..."
	@which $(CC) > /dev/null || (echo "‚ùå $(CC) no encontrado" && exit 1)
	@which $(FLEX) > /dev/null || (echo "‚ùå $(FLEX) no encontrado" && exit 1)
	@which $(BISON) > /dev/null || (echo "‚ùå $(BISON) no encontrado" && exit 1)
	@echo "‚úÖ Todas las herramientas est√°n disponibles"

# Mostrar informaci√≥n del proyecto
info:
	@echo "üìã INFORMACI√ìN DEL PROYECTO"
	@echo "=========================="
	@echo "Proyecto: Parser LL(1) con Lex/Yacc"
	@echo "Gram√°tica implementada:"
	@echo "  E  -> T E'"
	@echo "  E' -> + T E' | Œµ"
	@echo "  T  -> F T'"
	@echo "  T' -> * F T' | Œµ"
	@echo "  F  -> ( E ) | ident"
	@echo ""
	@echo "Archivos fuente:"
	@echo "  - lexer.l: Analizador l√©xico (Flex)"
	@echo "  - parser.y: Analizador sint√°ctico (Bison)"
	@echo ""
	@echo "Herramientas requeridas:"
	@echo "  - gcc: Compilador C"
	@echo "  - flex: Generador de analizadores l√©xicos"
	@echo "  - bison: Generador de analizadores sint√°cticos"
	@echo ""
	@echo "Comandos disponibles:"
	@echo "  make all      - Compilar el proyecto"
	@echo "  make run      - Ejecutar interactivamente"
	@echo "  make test     - Ejecutar pruebas v√°lidas"
	@echo "  make test-errors - Ejecutar pruebas de error"
	@echo "  make clean    - Limpiar archivos generados"

# Mostrar ayuda
help:
	@echo "üìñ AYUDA - Parser LL(1) con Lex/Yacc"
	@echo "===================================="
	@echo ""
	@echo "COMANDOS PRINCIPALES:"
	@echo "  make all          Compilar el proyecto completo"
	@echo "  make run          Ejecutar el parser interactivamente"
	@echo "  make test         Ejecutar pruebas con casos v√°lidos"
	@echo "  make test-errors  Ejecutar pruebas con casos de error"
	@echo "  make test-all     Ejecutar todas las pruebas"
	@echo "  make clean        Limpiar archivos generados"
	@echo ""
	@echo "COMANDOS DE INFORMACI√ìN:"
	@echo "  make info         Mostrar informaci√≥n del proyecto"
	@echo "  make ejemplos     Mostrar ejemplos de uso"
	@echo "  make check-tools  Verificar herramientas necesarias"
	@echo "  make help         Mostrar esta ayuda"
	@echo ""
	@echo "EJEMPLOS DE USO:"
	@echo "  Expresi√≥n simple:     a"
	@echo "  Suma:                 a + b"
	@echo "  Multiplicaci√≥n:       a * b"
	@echo "  Expresi√≥n compleja:   (a + b) * c"
	@echo "  Precedencia:          a + b * c"